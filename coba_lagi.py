#!/usr/bin/env python3

import re
import csv
import operator

per_user = {}
error = {}
logfile = r"/home/student-02-c69b69b8a2e0/syslog.log"
pattern = r"(INFO|ERROR) ([\w']*) [\[\]\d# ]*\(([\w\.]*)\)$"

with open(logfile, 'r') as file:
    for line in file:
        combine = re.search(pattern, line)
        if result is None:
            continue
        if combine.groups()[0] == "INFO":
            type = combine.groups()[0]
            message = combine.groups()[1]
            name = str(combine.groups()[1])[1:-1]
            
            if name in per_user:
                user = per_user[name]
                user[type] +=1
            else:
                per_user[name] = {"INFO":1, "ERROR":0}
        
        if combine.groups()[0] == "ERROR":
            type = combine.groups()[0]
            message = combine.groups()[1]
            name = str(combine.groups()[2])[1:-1]
            error[message] = error.get(message,0)+1

            if name in per_user:
                user = per_user[name]
                user[type] = {"INFO":0, "ERROR":1}


per_user_sorted = [("Username", "INFO", "ERROR")] + sorted(per_user.items())[0:8]
error_sorted = [("ERROR", "Count")] + sorted(error.items(), key = operator.itemgetter(1), reverse=True)

with open ("error_message.csv", "w") as error_csv:
    for line in error_sorted:
        error_csv.write("{}, {}\n".format(line[0], line[1]))

with open("user_statistics.csv", "w") as user_csv:
    for line in per_user_sorted:
        if isinstance(line[1], dict):
            user_csv.write("{}. {}, {}\n".format(line[0], line[1], get("INFO"), line[1].get("ERROR")))
        else:
            user_csv.write("{}, {}, {}\n".format(line[0], line[1], line[2]))



#!/usr/bin/env python3
import os
from PIL import Image

cwd = os.getcwd()
old_path = cwd + '/images/'
new_path = '/opt/icons/'

if not os.path.exists(new_path):
    os.makedirs(new_path)

for image in os.listdir(old_path):
    if not image.startswith('.'):
        im = Image.open(old_path +image)
        im.convert('RGB').rotate(270).resize((128, 128)).save(new_path + image, '$
    im.close()



#! /usr/bin/env python3
import os
import requests

path = '/data/feedback/'
files = os.listdir(path)
#files.sort()
url = "http://104.154.96.226/feedback/"
contents = ["title", "name", "date", "feedback"]

#def combine(file):
 #   with open(path + file) as f
for file in files:
    cont = 0
    dict = {}
    with open(path+file)as f:
        for line in f:
                comment = line.strip()
                dict[contents[cont]] = comment
                cont += 1
    print(dict)

    response = requests.post(url, json=dict)
    print(response.request.body)
    print(response.status_code)


#!/usr/bin/env python3

import json
import locale
import sys
import emails
import reports

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.
Returns a list of lines that summarize the information.
  """

  max_revenue = {"revenue": 0}
  sales = {"total_sales": 0, "car_model": ""}
  car_years = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    if item["total_sales"] > sales["total_sales"]:
      sales["total_sales"] = item["total_sales"]
      sales["car_model"] = item["car"]["car_model"]
    # TODO: also handle most popular car_year
    car_years[item["car"]["car_year"]] = car_years.get(item["car"]["car_year"],$

  sorted_car_years = sorted(car_years.items(), key=lambda a: a[1], reverse=True)

sorted_car_years = sorted(car_years.items(), key=lambda a: a[1], reverse=True)

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(sales['car_model'], sales['total_sal$
    "The most popular year was {} with {} sales.".format(sorted_car_years[0][0]$

  ]

  return summary

def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  table_cars = []
  for item in car_data:
    table_cars.append([item["id"], format_car(item["car"]), item["price"], item$
  table_cars.sort(key=lambda a: int(a[3]), reverse=True)
  return table_data + table_cars


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report
  car_data = cars_dict_to_table(data)
  reports.generate("/tmp/cars.pdf", "Sales summary for last month", "<br/>".joi$

  # TODO: send the PDF report as an email attachment
  message = emails.generate("automation@example.com", "student-02-38bdf426e17d@$
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)
